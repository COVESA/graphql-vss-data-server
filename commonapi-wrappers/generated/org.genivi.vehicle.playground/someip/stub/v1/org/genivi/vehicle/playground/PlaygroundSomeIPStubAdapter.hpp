/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_ORG_GENIVI_VEHICLE_PLAYGROUND_PLAYGROUND_SOMEIP_STUB_ADAPTER_HPP_
#define V1_ORG_GENIVI_VEHICLE_PLAYGROUND_PLAYGROUND_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/org/genivi/vehicle/playground/PlaygroundStub.hpp>
#include <org/genivi/vehicle/playgroundtypes/PlaygroundTypesSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace org {
namespace genivi {
namespace vehicle {
namespace playground {

template <typename _Stub = ::v1::org::genivi::vehicle::playground::PlaygroundStub, typename... _Stubs>
class PlaygroundSomeIPStubAdapterInternal
    : public virtual PlaygroundStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> PlaygroundSomeIPStubAdapterHelper;

    ~PlaygroundSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        PlaygroundSomeIPStubAdapterHelper::deinit();
    }

    /*
     * description: 
     * Current consumption in liters per 100 km
     */
    void fireConsumptionAttributeChanged(const float &_value);
    
    /*
     * description: 
     * Engine speed measured as rotations per minute
     */
    void fireEngineSpeedAttributeChanged(const uint16_t &_value);
    
    /*
     * description: 
     * Current gear
     */
    void fireCurrentGearAttributeChanged(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear &_value);
    
    /*
     * description: 
     * Is reverse gear selected
     */
    void fireIsReverseGearOnAttributeChanged(const bool &_value);
    
    /*
     * description: 
     * Drive Type
     */
    void fireDrivePowerTransmissionAttributeChanged(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType &_value);
    
    /*
     * description: 
     * Report the opening status for each door
     */
    void fireDoorsOpeningStatusAttributeChanged(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus &_value);
    
    /*
     * description: 
     * Describes the seat heating status set by the user.
     * index 0 == Driver
     * index 1 == Co-Driver
     * index 3 == Passenger in the second row on the Driver side
     * index 4 == Passenger in the second row on the Middle side
     * index 5 == Passenger in the second row on the Co-driver side
     * index 6 == Passenger in the third row on the Driver side
     * index 7 == Passenger in the third row on the Co-driver side
     * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
     */
    void fireSeatHeatingStatusAttributeChanged(const std::vector< bool > &_value);
    
    /*
     * description: 
     * Describes the seat heating level selected by the user
     * index 0 == Driver
     * index 1 == Co-Driver
     * index 3 == Passenger in the second row on the Driver side
     * index 4 == Passenger in the second row on the Middle side
     * index 5 == Passenger in the second row on the Co-driver side
     * index 6 == Passenger in the third row on the Driver side
     * index 7 == Passenger in the third row on the Co-driver side
     * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
     */
    void fireSeatHeatingLevelAttributeChanged(const std::vector< uint8_t > &_value);
    
    /*
     * description: 
     * Vehicle position data provided by GPS
     */
    void fireVehiclePositionEvent(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::StatusGPS &_statusGPS);

    /*
     * description: 
     * The current tank volume
     */
    void fireCurrentTankVolumeEvent(const uint8_t &_volume);

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        CommonAPI::Version
    > getPlaygroundInterfaceVersionStubDispatcher;

    /*
     * description: 
     * Current consumption in liters per 100 km
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        float
    > getConsumptionAttributeStubDispatcher;
    
    /*
     * description: 
     * Capacity of the fuel tank in milliliters
     * Unit: ml
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > getCapacityAttributeStubDispatcher;
    
    /*
     * description: 
     * Current volume of fuel in the tank in liters
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        float
    > getVolumeAttributeStubDispatcher;
    
    /*
     * description: 
     * Engine speed measured as rotations per minute
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        uint16_t,
        CommonAPI::SomeIP::IntegerDeployment<uint16_t>
    > getEngineSpeedAttributeStubDispatcher;
    
    /*
     * description: 
     * Current gear
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear,
        ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::GearDeployment_t
    > getCurrentGearAttributeStubDispatcher;
    
    /*
     * description: 
     * Is reverse gear selected
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        bool
    > getIsReverseGearOnAttributeStubDispatcher;
    
    /*
     * description: 
     * Drive Type
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType,
        ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::DriveTypeDeployment_t
    > getDrivePowerTransmissionAttributeStubDispatcher;
    
    /*
     * description: 
     * Report the opening status for each door
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus,
        ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::DoorsStatusDeployment_t
    > getDoorsOpeningStatusAttributeStubDispatcher;
    
    /*
     * description: 
     * Describes the seat heating status set by the user.
     * index 0 == Driver
     * index 1 == Co-Driver
     * index 3 == Passenger in the second row on the Driver side
     * index 4 == Passenger in the second row on the Middle side
     * index 5 == Passenger in the second row on the Co-driver side
     * index 6 == Passenger in the third row on the Driver side
     * index 7 == Passenger in the third row on the Co-driver side
     * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        std::vector< bool >,
        CommonAPI::SomeIP::ArrayDeployment< CommonAPI::EmptyDeployment >
    > getSeatHeatingStatusAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        std::vector< bool >,
        CommonAPI::SomeIP::ArrayDeployment< CommonAPI::EmptyDeployment >
    > setSeatHeatingStatusAttributeStubDispatcher;
    
    /*
     * description: 
     * Describes the seat heating level selected by the user
     * index 0 == Driver
     * index 1 == Co-Driver
     * index 3 == Passenger in the second row on the Driver side
     * index 4 == Passenger in the second row on the Middle side
     * index 5 == Passenger in the second row on the Co-driver side
     * index 6 == Passenger in the third row on the Driver side
     * index 7 == Passenger in the third row on the Co-driver side
     * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        std::vector< uint8_t >,
        CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
    > getSeatHeatingLevelAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        std::vector< uint8_t >,
        CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
    > setSeatHeatingLevelAttributeStubDispatcher;
    
    /*
     * description: 
     * Trigger tire pressure initialization process
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        std::tuple< >,
        std::tuple< >,
        std::tuple< >,
        std::tuple< >
    > initTirePressureCalibrationStubDispatcher;
    
    /*
     * description: 
     * Trigger the change on doors opening state
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::org::genivi::vehicle::playground::PlaygroundStub,
        std::tuple< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::CarDoorsCommand>,
        std::tuple< >,
        std::tuple< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::CarDoorsCommandDeployment_t>,
        std::tuple< >
    > changeDoorsStateStubDispatcher;
    
    PlaygroundSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        PlaygroundSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< PlaygroundStub>(_stub)),
        getPlaygroundInterfaceVersionStubDispatcher(&PlaygroundStub::lockInterfaceVersionAttribute, &PlaygroundStub::getInterfaceVersion, false, true),
        getConsumptionAttributeStubDispatcher(
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::lockConsumptionAttribute,
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::getConsumptionAttribute,
            false,
            _stub->hasElement(0))
        ,
        getCapacityAttributeStubDispatcher(
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::lockCapacityAttribute,
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::getCapacityAttribute,
            false,
            _stub->hasElement(1))
        ,
        getVolumeAttributeStubDispatcher(
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::lockVolumeAttribute,
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::getVolumeAttribute,
            false,
            _stub->hasElement(2))
        ,
        getEngineSpeedAttributeStubDispatcher(
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::lockEngineSpeedAttribute,
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::getEngineSpeedAttribute,
            false,
            _stub->hasElement(3))
        ,
        getCurrentGearAttributeStubDispatcher(
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::lockCurrentGearAttribute,
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::getCurrentGearAttribute,
            false,
            _stub->hasElement(4))
        ,
        getIsReverseGearOnAttributeStubDispatcher(
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::lockIsReverseGearOnAttribute,
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::getIsReverseGearOnAttribute,
            false,
            _stub->hasElement(5))
        ,
        getDrivePowerTransmissionAttributeStubDispatcher(
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::lockDrivePowerTransmissionAttribute,
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::getDrivePowerTransmissionAttribute,
            false,
            _stub->hasElement(6))
        ,
        getDoorsOpeningStatusAttributeStubDispatcher(
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::lockDoorsOpeningStatusAttribute,
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::getDoorsOpeningStatusAttribute,
            false,
            _stub->hasElement(7))
        ,
        getSeatHeatingStatusAttributeStubDispatcher(
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::lockSeatHeatingStatusAttribute,
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::getSeatHeatingStatusAttribute,
            false,
            _stub->hasElement(8)),
        setSeatHeatingStatusAttributeStubDispatcher(
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::lockSeatHeatingStatusAttribute,
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::getSeatHeatingStatusAttribute,
            &PlaygroundStubRemoteEvent::onRemoteSetSeatHeatingStatusAttribute,
            &PlaygroundStubRemoteEvent::onRemoteSeatHeatingStatusAttributeChanged,
            &PlaygroundStubAdapter::fireSeatHeatingStatusAttributeChanged,
            false,
            _stub->hasElement(8))
        ,
        getSeatHeatingLevelAttributeStubDispatcher(
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::lockSeatHeatingLevelAttribute,
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::getSeatHeatingLevelAttribute,
            false,
            _stub->hasElement(9)),
        setSeatHeatingLevelAttributeStubDispatcher(
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::lockSeatHeatingLevelAttribute,
            &::v1::org::genivi::vehicle::playground::PlaygroundStub::getSeatHeatingLevelAttribute,
            &PlaygroundStubRemoteEvent::onRemoteSetSeatHeatingLevelAttribute,
            &PlaygroundStubRemoteEvent::onRemoteSeatHeatingLevelAttributeChanged,
            &PlaygroundStubAdapter::fireSeatHeatingLevelAttributeChanged,
            false,
            _stub->hasElement(9))
        ,
        initTirePressureCalibrationStubDispatcher(
            &PlaygroundStub::initTirePressureCalibration,
            false,
            _stub->hasElement(10),
            std::make_tuple(),
            std::make_tuple())
        
        ,
        changeDoorsStateStubDispatcher(
            &PlaygroundStub::changeDoorsState,
            false,
            _stub->hasElement(11),
            std::make_tuple(static_cast< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::CarDoorsCommandDeployment_t* >(nullptr)),
            std::make_tuple())
        
    {
        /*
         * description: 
         * Current consumption in liters per 100 km
         */
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1) }, &getConsumptionAttributeStubDispatcher );
        /*
         * description: 
         * Capacity of the fuel tank in milliliters
         * Unit: ml
         */
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x2) }, &getCapacityAttributeStubDispatcher );
        /*
         * description: 
         * Current volume of fuel in the tank in liters
         */
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x3) }, &getVolumeAttributeStubDispatcher );
        /*
         * description: 
         * Engine speed measured as rotations per minute
         */
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x4) }, &getEngineSpeedAttributeStubDispatcher );
        /*
         * description: 
         * Current gear
         */
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5) }, &getCurrentGearAttributeStubDispatcher );
        /*
         * description: 
         * Is reverse gear selected
         */
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6) }, &getIsReverseGearOnAttributeStubDispatcher );
        /*
         * description: 
         * Drive Type
         */
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7) }, &getDrivePowerTransmissionAttributeStubDispatcher );
        /*
         * description: 
         * Report the opening status for each door
         */
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x8) }, &getDoorsOpeningStatusAttributeStubDispatcher );
        /*
         * description: 
         * Describes the seat heating status set by the user.
         * index 0 == Driver
         * index 1 == Co-Driver
         * index 3 == Passenger in the second row on the Driver side
         * index 4 == Passenger in the second row on the Middle side
         * index 5 == Passenger in the second row on the Co-driver side
         * index 6 == Passenger in the third row on the Driver side
         * index 7 == Passenger in the third row on the Co-driver side
         * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
         */
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x9) }, &getSeatHeatingStatusAttributeStubDispatcher );
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xa) }, &setSeatHeatingStatusAttributeStubDispatcher );
        /*
         * description: 
         * Describes the seat heating level selected by the user
         * index 0 == Driver
         * index 1 == Co-Driver
         * index 3 == Passenger in the second row on the Driver side
         * index 4 == Passenger in the second row on the Middle side
         * index 5 == Passenger in the second row on the Co-driver side
         * index 6 == Passenger in the third row on the Driver side
         * index 7 == Passenger in the third row on the Co-driver side
         * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
         */
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xb) }, &getSeatHeatingLevelAttributeStubDispatcher );
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xc) }, &setSeatHeatingLevelAttributeStubDispatcher );
        /*
         * description: 
         * Trigger tire pressure initialization process
         */
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xd) }, &initTirePressureCalibrationStubDispatcher );
        /*
         * description: 
         * Trigger the change on doors opening state
         */
        PlaygroundSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xe) }, &changeDoorsStateStubDispatcher );
        std::shared_ptr<CommonAPI::SomeIP::ClientId> itsClient = std::make_shared<CommonAPI::SomeIP::ClientId>(0xFFFF, 0xFFFFFFFF, 0xFFFFFFFF);

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x9));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8009), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0xa));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x800a), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        if (_stub->hasElement(0)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8001), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireConsumptionAttributeChanged(std::dynamic_pointer_cast< ::v1::org::genivi::vehicle::playground::PlaygroundStub>(_stub)->getConsumptionAttribute(itsClient));
        }

        if (_stub->hasElement(3)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x2)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8002), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireEngineSpeedAttributeChanged(std::dynamic_pointer_cast< ::v1::org::genivi::vehicle::playground::PlaygroundStub>(_stub)->getEngineSpeedAttribute(itsClient));
        }

        if (_stub->hasElement(4)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x3)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8003), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireCurrentGearAttributeChanged(std::dynamic_pointer_cast< ::v1::org::genivi::vehicle::playground::PlaygroundStub>(_stub)->getCurrentGearAttribute(itsClient));
        }

        if (_stub->hasElement(5)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x4)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8004), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireIsReverseGearOnAttributeChanged(std::dynamic_pointer_cast< ::v1::org::genivi::vehicle::playground::PlaygroundStub>(_stub)->getIsReverseGearOnAttribute(itsClient));
        }

        if (_stub->hasElement(6)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x5)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8005), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireDrivePowerTransmissionAttributeChanged(std::dynamic_pointer_cast< ::v1::org::genivi::vehicle::playground::PlaygroundStub>(_stub)->getDrivePowerTransmissionAttribute(itsClient));
        }

        if (_stub->hasElement(7)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x6)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8006), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireDoorsOpeningStatusAttributeChanged(std::dynamic_pointer_cast< ::v1::org::genivi::vehicle::playground::PlaygroundStub>(_stub)->getDoorsOpeningStatusAttribute(itsClient));
        }

        if (_stub->hasElement(8)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x7)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8007), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireSeatHeatingStatusAttributeChanged(std::dynamic_pointer_cast< ::v1::org::genivi::vehicle::playground::PlaygroundStub>(_stub)->getSeatHeatingStatusAttribute(itsClient));
        }

        if (_stub->hasElement(9)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x8)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8008), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireSeatHeatingLevelAttributeChanged(std::dynamic_pointer_cast< ::v1::org::genivi::vehicle::playground::PlaygroundStub>(_stub)->getSeatHeatingLevelAttribute(itsClient));
        }

    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

/*
 * description: 
 * Current consumption in liters per 100 km
 */
template <typename _Stub, typename... _Stubs>
void PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireConsumptionAttributeChanged(const float &_value) {
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            float
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8001),
        false,
        _value
    );
}

/*
 * description: 
 * Engine speed measured as rotations per minute
 */
template <typename _Stub, typename... _Stubs>
void PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireEngineSpeedAttributeChanged(const uint16_t &_value) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8002),
        false,
        deployedValue
    );
}

/*
 * description: 
 * Current gear
 */
template <typename _Stub, typename... _Stubs>
void PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireCurrentGearAttributeChanged(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear &_value) {
    CommonAPI::Deployable< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear, ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::GearDeployment_t> deployedValue(_value, static_cast< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::GearDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear,
                ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::GearDeployment_t
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8003),
        false,
        deployedValue
    );
}

/*
 * description: 
 * Is reverse gear selected
 */
template <typename _Stub, typename... _Stubs>
void PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireIsReverseGearOnAttributeChanged(const bool &_value) {
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            bool
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8004),
        false,
        _value
    );
}

/*
 * description: 
 * Drive Type
 */
template <typename _Stub, typename... _Stubs>
void PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDrivePowerTransmissionAttributeChanged(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType &_value) {
    CommonAPI::Deployable< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType, ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::DriveTypeDeployment_t> deployedValue(_value, static_cast< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::DriveTypeDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType,
                ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::DriveTypeDeployment_t
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8005),
        false,
        deployedValue
    );
}

/*
 * description: 
 * Report the opening status for each door
 */
template <typename _Stub, typename... _Stubs>
void PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDoorsOpeningStatusAttributeChanged(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus &_value) {
    CommonAPI::Deployable< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus, ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::DoorsStatusDeployment_t> deployedValue(_value, static_cast< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::DoorsStatusDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus,
                ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::DoorsStatusDeployment_t
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8006),
        false,
        deployedValue
    );
}

/*
 * description: 
 * Describes the seat heating status set by the user.
 * index 0 == Driver
 * index 1 == Co-Driver
 * index 3 == Passenger in the second row on the Driver side
 * index 4 == Passenger in the second row on the Middle side
 * index 5 == Passenger in the second row on the Co-driver side
 * index 6 == Passenger in the third row on the Driver side
 * index 7 == Passenger in the third row on the Co-driver side
 * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
 */
template <typename _Stub, typename... _Stubs>
void PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireSeatHeatingStatusAttributeChanged(const std::vector< bool > &_value) {
    CommonAPI::Deployable< std::vector< bool >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::EmptyDeployment >> deployedValue(_value, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::EmptyDeployment >* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< bool >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::EmptyDeployment >
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8007),
        false,
        deployedValue
    );
}

/*
 * description: 
 * Describes the seat heating level selected by the user
 * index 0 == Driver
 * index 1 == Co-Driver
 * index 3 == Passenger in the second row on the Driver side
 * index 4 == Passenger in the second row on the Middle side
 * index 5 == Passenger in the second row on the Co-driver side
 * index 6 == Passenger in the third row on the Driver side
 * index 7 == Passenger in the third row on the Co-driver side
 * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
 */
template <typename _Stub, typename... _Stubs>
void PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireSeatHeatingLevelAttributeChanged(const std::vector< uint8_t > &_value) {
    CommonAPI::Deployable< std::vector< uint8_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >> deployedValue(_value, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint8_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8008),
        false,
        deployedValue
    );
}

/*
 * description: 
 * Vehicle position data provided by GPS
 */
template <typename _Stub, typename... _Stubs>
void PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireVehiclePositionEvent(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::StatusGPS &_statusGPS) {
    CommonAPI::Deployable< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::StatusGPS, ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::StatusGPSDeployment_t> deployed_statusGPS(_statusGPS, static_cast< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::StatusGPSDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::StatusGPS, ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::StatusGPSDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8009),
            false,
             deployed_statusGPS 
    );
}

/*
 * description: 
 * The current tank volume
 */
template <typename _Stub, typename... _Stubs>
void PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireCurrentTankVolumeEvent(const uint8_t &_volume) {
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deployed_volume(_volume, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t> > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x800a),
            false,
             deployed_volume 
    );
}


template <typename _Stub, typename... _Stubs>
void PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {
}

template <typename _Stub, typename... _Stubs>
void PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {
}

template <typename _Stub = ::v1::org::genivi::vehicle::playground::PlaygroundStub, typename... _Stubs>
class PlaygroundSomeIPStubAdapter
    : public PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    PlaygroundSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          PlaygroundSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace playground
} // namespace vehicle
} // namespace genivi
} // namespace org
} // namespace v1

#endif // V1_ORG_GENIVI_VEHICLE_PLAYGROUND_Playground_SOMEIP_STUB_ADAPTER_HPP_
