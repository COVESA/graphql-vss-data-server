/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_ORG_GENIVI_VEHICLE_PLAYGROUND_Playground_STUB_HPP_
#define V1_ORG_GENIVI_VEHICLE_PLAYGROUND_Playground_STUB_HPP_

#include <functional>
#include <sstream>



#include <org/genivi/vehicle/playgroundtypes/PlaygroundTypes.hpp>

#include <v1/org/genivi/vehicle/playground/Playground.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <mutex>

#include <CommonAPI/Stub.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace org {
namespace genivi {
namespace vehicle {
namespace playground {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Playground. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class PlaygroundStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual Playground {
 public:
    ///Notifies all remote listeners about a change of value of the attribute consumption.
    virtual void fireConsumptionAttributeChanged(const float &consumption) = 0;
    ///Notifies all remote listeners about a change of value of the attribute engineSpeed.
    virtual void fireEngineSpeedAttributeChanged(const uint16_t &engineSpeed) = 0;
    ///Notifies all remote listeners about a change of value of the attribute currentGear.
    virtual void fireCurrentGearAttributeChanged(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear &currentGear) = 0;
    ///Notifies all remote listeners about a change of value of the attribute isReverseGearOn.
    virtual void fireIsReverseGearOnAttributeChanged(const bool &isReverseGearOn) = 0;
    ///Notifies all remote listeners about a change of value of the attribute drivePowerTransmission.
    virtual void fireDrivePowerTransmissionAttributeChanged(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType &drivePowerTransmission) = 0;
    ///Notifies all remote listeners about a change of value of the attribute doorsOpeningStatus.
    virtual void fireDoorsOpeningStatusAttributeChanged(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus &doorsOpeningStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute seatHeatingStatus.
    virtual void fireSeatHeatingStatusAttributeChanged(const std::vector< bool > &seatHeatingStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute seatHeatingLevel.
    virtual void fireSeatHeatingLevelAttributeChanged(const std::vector< uint8_t > &seatHeatingLevel) = 0;
    /**
    * Sends a broadcast event for vehiclePosition. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireVehiclePositionEvent(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::StatusGPS &_statusGPS) = 0;
    /**
    * Sends a broadcast event for currentTankVolume. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireCurrentTankVolumeEvent(const uint8_t &_volume) = 0;


    virtual void deactivateManagedInstances() = 0;

    void lockConsumptionAttribute(bool _lockAccess) {
        if (_lockAccess) {
            consumptionMutex_.lock();
        } else {
            consumptionMutex_.unlock();
        }
    }
    void lockCapacityAttribute(bool _lockAccess) {
        if (_lockAccess) {
            capacityMutex_.lock();
        } else {
            capacityMutex_.unlock();
        }
    }
    void lockVolumeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            volumeMutex_.lock();
        } else {
            volumeMutex_.unlock();
        }
    }
    void lockEngineSpeedAttribute(bool _lockAccess) {
        if (_lockAccess) {
            engineSpeedMutex_.lock();
        } else {
            engineSpeedMutex_.unlock();
        }
    }
    void lockCurrentGearAttribute(bool _lockAccess) {
        if (_lockAccess) {
            currentGearMutex_.lock();
        } else {
            currentGearMutex_.unlock();
        }
    }
    void lockIsReverseGearOnAttribute(bool _lockAccess) {
        if (_lockAccess) {
            isReverseGearOnMutex_.lock();
        } else {
            isReverseGearOnMutex_.unlock();
        }
    }
    void lockDrivePowerTransmissionAttribute(bool _lockAccess) {
        if (_lockAccess) {
            drivePowerTransmissionMutex_.lock();
        } else {
            drivePowerTransmissionMutex_.unlock();
        }
    }
    void lockDoorsOpeningStatusAttribute(bool _lockAccess) {
        if (_lockAccess) {
            doorsOpeningStatusMutex_.lock();
        } else {
            doorsOpeningStatusMutex_.unlock();
        }
    }
    void lockSeatHeatingStatusAttribute(bool _lockAccess) {
        if (_lockAccess) {
            seatHeatingStatusMutex_.lock();
        } else {
            seatHeatingStatusMutex_.unlock();
        }
    }
    void lockSeatHeatingLevelAttribute(bool _lockAccess) {
        if (_lockAccess) {
            seatHeatingLevelMutex_.lock();
        } else {
            seatHeatingLevelMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
    std::recursive_mutex consumptionMutex_;
    std::recursive_mutex capacityMutex_;
    std::recursive_mutex volumeMutex_;
    std::recursive_mutex engineSpeedMutex_;
    std::recursive_mutex currentGearMutex_;
    std::recursive_mutex isReverseGearOnMutex_;
    std::recursive_mutex drivePowerTransmissionMutex_;
    std::recursive_mutex doorsOpeningStatusMutex_;
    std::recursive_mutex seatHeatingStatusMutex_;
    std::recursive_mutex seatHeatingLevelMutex_;

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Playground.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class PlaygroundStubRemoteEvent
{
public:
    virtual ~PlaygroundStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute seatHeatingStatus
    virtual bool onRemoteSetSeatHeatingStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< bool > _value) = 0;
    /// Action callback for remote set requests on the attribute seatHeatingStatus
    virtual void onRemoteSeatHeatingStatusAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute seatHeatingLevel
    virtual bool onRemoteSetSeatHeatingLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< uint8_t > _value) = 0;
    /// Action callback for remote set requests on the attribute seatHeatingLevel
    virtual void onRemoteSeatHeatingLevelAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Playground to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class PlaygroundStub
    : public virtual CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>
{
public:
    typedef std::function<void ()> initTirePressureCalibrationReply_t;
    typedef std::function<void ()> changeDoorsStateReply_t;

    virtual ~PlaygroundStub() {}
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }
    bool hasElement(const uint32_t _id) const {
        return (_id < 14);
    }
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /*
     * description: 
     * Current consumption in liters per 100 km
     */
    /// Provides getter access to the attribute consumption
    virtual const float &getConsumptionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireConsumptionAttributeChanged(float _value) {
    auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireConsumptionAttributeChanged(_value);
    }
    void lockConsumptionAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockConsumptionAttribute(_lockAccess);
    }
    /*
     * description: 
     * Capacity of the fuel tank in milliliters
     * Unit: ml
     */
    /// Provides getter access to the attribute capacity
    virtual const uint8_t &getCapacityAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    void lockCapacityAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockCapacityAttribute(_lockAccess);
    }
    /*
     * description: 
     * Current volume of fuel in the tank in liters
     */
    /// Provides getter access to the attribute volume
    virtual const float &getVolumeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    void lockVolumeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockVolumeAttribute(_lockAccess);
    }
    /*
     * description: 
     * Engine speed measured as rotations per minute
     */
    /// Provides getter access to the attribute engineSpeed
    virtual const uint16_t &getEngineSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireEngineSpeedAttributeChanged(uint16_t _value) {
    auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireEngineSpeedAttributeChanged(_value);
    }
    void lockEngineSpeedAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockEngineSpeedAttribute(_lockAccess);
    }
    /*
     * description: 
     * Current gear
     */
    /// Provides getter access to the attribute currentGear
    virtual const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear &getCurrentGearAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireCurrentGearAttributeChanged(::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear _value) {
    auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireCurrentGearAttributeChanged(_value);
    }
    void lockCurrentGearAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockCurrentGearAttribute(_lockAccess);
    }
    /*
     * description: 
     * Is reverse gear selected
     */
    /// Provides getter access to the attribute isReverseGearOn
    virtual const bool &getIsReverseGearOnAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireIsReverseGearOnAttributeChanged(bool _value) {
    auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireIsReverseGearOnAttributeChanged(_value);
    }
    void lockIsReverseGearOnAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockIsReverseGearOnAttribute(_lockAccess);
    }
    /*
     * description: 
     * Drive Type
     */
    /// Provides getter access to the attribute drivePowerTransmission
    virtual const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType &getDrivePowerTransmissionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDrivePowerTransmissionAttributeChanged(::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType _value) {
    auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDrivePowerTransmissionAttributeChanged(_value);
    }
    void lockDrivePowerTransmissionAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDrivePowerTransmissionAttribute(_lockAccess);
    }
    /*
     * description: 
     * Report the opening status for each door
     */
    /// Provides getter access to the attribute doorsOpeningStatus
    virtual const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus &getDoorsOpeningStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDoorsOpeningStatusAttributeChanged(::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus _value) {
    auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDoorsOpeningStatusAttributeChanged(_value);
    }
    void lockDoorsOpeningStatusAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDoorsOpeningStatusAttribute(_lockAccess);
    }
    /*
     * description: 
     * Describes the seat heating status set by the user.
     * index 0 == Driver
     * index 1 == Co-Driver
     * index 3 == Passenger in the second row on the Driver side
     * index 4 == Passenger in the second row on the Middle side
     * index 5 == Passenger in the second row on the Co-driver side
     * index 6 == Passenger in the third row on the Driver side
     * index 7 == Passenger in the third row on the Co-driver side
     * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
     */
    /// Provides getter access to the attribute seatHeatingStatus
    virtual const std::vector< bool > &getSeatHeatingStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireSeatHeatingStatusAttributeChanged(std::vector< bool > _value) {
    auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireSeatHeatingStatusAttributeChanged(_value);
    }
    void lockSeatHeatingStatusAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockSeatHeatingStatusAttribute(_lockAccess);
    }
    /*
     * description: 
     * Describes the seat heating level selected by the user
     * index 0 == Driver
     * index 1 == Co-Driver
     * index 3 == Passenger in the second row on the Driver side
     * index 4 == Passenger in the second row on the Middle side
     * index 5 == Passenger in the second row on the Co-driver side
     * index 6 == Passenger in the third row on the Driver side
     * index 7 == Passenger in the third row on the Co-driver side
     * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
     */
    /// Provides getter access to the attribute seatHeatingLevel
    virtual const std::vector< uint8_t > &getSeatHeatingLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireSeatHeatingLevelAttributeChanged(std::vector< uint8_t > _value) {
    auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireSeatHeatingLevelAttributeChanged(_value);
    }
    void lockSeatHeatingLevelAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockSeatHeatingLevelAttribute(_lockAccess);
    }
    /*
     * description: 
     * Trigger tire pressure initialization process
     */
    /// This is the method that will be called on remote calls on the method initTirePressureCalibration.
    virtual void initTirePressureCalibration(const std::shared_ptr<CommonAPI::ClientId> _client, initTirePressureCalibrationReply_t _reply) = 0;
    /*
     * description: 
     * Trigger the change on doors opening state
     */
    /// This is the method that will be called on remote calls on the method changeDoorsState.
    virtual void changeDoorsState(const std::shared_ptr<CommonAPI::ClientId> _client, ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::CarDoorsCommand _commands, changeDoorsStateReply_t _reply) = 0;
    /*
     * description: 
     * Vehicle position data provided by GPS
     */
    /// Sends a broadcast event for vehiclePosition.
    virtual void fireVehiclePositionEvent(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::StatusGPS &_statusGPS) {
        auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireVehiclePositionEvent(_statusGPS);
    }
    /*
     * description: 
     * The current tank volume
     */
    /// Sends a broadcast event for currentTankVolume.
    virtual void fireCurrentTankVolumeEvent(const uint8_t &_volume) {
        auto stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireCurrentTankVolumeEvent(_volume);
    }


    using CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef PlaygroundStubRemoteEvent RemoteEventType;
    typedef Playground StubInterface;
};

} // namespace playground
} // namespace vehicle
} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_VEHICLE_PLAYGROUND_Playground_STUB_HPP_
