/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_ORG_GENIVI_VEHICLE_PLAYGROUND_Playground_PROXY_BASE_HPP_
#define V1_ORG_GENIVI_VEHICLE_PLAYGROUND_Playground_PROXY_BASE_HPP_

#include <v1/org/genivi/vehicle/playground/Playground.hpp>


#include <org/genivi/vehicle/playgroundtypes/PlaygroundTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace org {
namespace genivi {
namespace vehicle {
namespace playground {

class PlaygroundProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<float> ConsumptionAttribute;
    typedef CommonAPI::ReadonlyAttribute<uint8_t> CapacityAttribute;
    typedef CommonAPI::ReadonlyAttribute<float> VolumeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint16_t> EngineSpeedAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear> CurrentGearAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> IsReverseGearOnAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType> DrivePowerTransmissionAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus> DoorsOpeningStatusAttribute;
    typedef CommonAPI::ObservableAttribute<std::vector< bool >> SeatHeatingStatusAttribute;
    typedef CommonAPI::ObservableAttribute<std::vector< uint8_t >> SeatHeatingLevelAttribute;
    typedef CommonAPI::Event<
        ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::StatusGPS
    > VehiclePositionEvent;
    typedef CommonAPI::Event<
        uint8_t
    > CurrentTankVolumeEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> InitTirePressureCalibrationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> ChangeDoorsStateAsyncCallback;

    /*
     * description: 
     * Current consumption in liters per 100 km
     */
    virtual ConsumptionAttribute& getConsumptionAttribute() = 0;
    /*
     * description: 
     * Capacity of the fuel tank in milliliters
     * Unit: ml
     */
    virtual CapacityAttribute& getCapacityAttribute() = 0;
    /*
     * description: 
     * Current volume of fuel in the tank in liters
     */
    virtual VolumeAttribute& getVolumeAttribute() = 0;
    /*
     * description: 
     * Engine speed measured as rotations per minute
     */
    virtual EngineSpeedAttribute& getEngineSpeedAttribute() = 0;
    /*
     * description: 
     * Current gear
     */
    virtual CurrentGearAttribute& getCurrentGearAttribute() = 0;
    /*
     * description: 
     * Is reverse gear selected
     */
    virtual IsReverseGearOnAttribute& getIsReverseGearOnAttribute() = 0;
    /*
     * description: 
     * Drive Type
     */
    virtual DrivePowerTransmissionAttribute& getDrivePowerTransmissionAttribute() = 0;
    /*
     * description: 
     * Report the opening status for each door
     */
    virtual DoorsOpeningStatusAttribute& getDoorsOpeningStatusAttribute() = 0;
    /*
     * description: 
     * Describes the seat heating status set by the user.
     * index 0 == Driver
     * index 1 == Co-Driver
     * index 3 == Passenger in the second row on the Driver side
     * index 4 == Passenger in the second row on the Middle side
     * index 5 == Passenger in the second row on the Co-driver side
     * index 6 == Passenger in the third row on the Driver side
     * index 7 == Passenger in the third row on the Co-driver side
     * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
     */
    virtual SeatHeatingStatusAttribute& getSeatHeatingStatusAttribute() = 0;
    /*
     * description: 
     * Describes the seat heating level selected by the user
     * index 0 == Driver
     * index 1 == Co-Driver
     * index 3 == Passenger in the second row on the Driver side
     * index 4 == Passenger in the second row on the Middle side
     * index 5 == Passenger in the second row on the Co-driver side
     * index 6 == Passenger in the third row on the Driver side
     * index 7 == Passenger in the third row on the Co-driver side
     * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
     */
    virtual SeatHeatingLevelAttribute& getSeatHeatingLevelAttribute() = 0;
    /*
     * description: 
     * Trigger tire pressure initialization process
     */
    virtual void initTirePressureCalibration(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> initTirePressureCalibrationAsync(InitTirePressureCalibrationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Trigger the change on doors opening state
     */
    virtual void changeDoorsState(::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::CarDoorsCommand _commands, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> changeDoorsStateAsync(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::CarDoorsCommand &_commands, ChangeDoorsStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Vehicle position data provided by GPS
     */
    virtual VehiclePositionEvent& getVehiclePositionEvent() = 0;
    /*
     * description: 
     * The current tank volume
     */
    virtual CurrentTankVolumeEvent& getCurrentTankVolumeEvent() = 0;

    virtual std::future<void> getCompletionFuture() = 0;
};

} // namespace playground
} // namespace vehicle
} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_VEHICLE_PLAYGROUND_Playground_PROXY_BASE_HPP_
