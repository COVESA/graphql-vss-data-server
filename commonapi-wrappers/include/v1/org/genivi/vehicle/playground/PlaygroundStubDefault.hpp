/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_ORG_GENIVI_VEHICLE_PLAYGROUND_Playground_STUB_DEFAULT_HPP_
#define V1_ORG_GENIVI_VEHICLE_PLAYGROUND_Playground_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/org/genivi/vehicle/playground/PlaygroundStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace org {
namespace genivi {
namespace vehicle {
namespace playground {

/**
 * Provides a default implementation for PlaygroundStubRemoteEvent and
 * PlaygroundStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT PlaygroundStubDefault
    : public virtual PlaygroundStub {
public:
    COMMONAPI_EXPORT PlaygroundStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(Playground::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT PlaygroundStubRemoteEvent* initStubAdapter(const std::shared_ptr< PlaygroundStubAdapter> &_adapter) {
        CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    COMMONAPI_EXPORT virtual const float &getConsumptionAttribute() {
        return consumptionAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const float &getConsumptionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getConsumptionAttribute();
    }
    COMMONAPI_EXPORT virtual void setConsumptionAttribute(float _value) {
        const bool valueChanged = trySetConsumptionAttribute(std::move(_value));
        if (valueChanged) {
            fireConsumptionAttributeChanged(consumptionAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual const uint8_t &getCapacityAttribute() {
        return capacityAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint8_t &getCapacityAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getCapacityAttribute();
    }
    COMMONAPI_EXPORT virtual void setCapacityAttribute(uint8_t _value) {
        (void)trySetCapacityAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const float &getVolumeAttribute() {
        return volumeAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const float &getVolumeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getVolumeAttribute();
    }
    COMMONAPI_EXPORT virtual void setVolumeAttribute(float _value) {
        (void)trySetVolumeAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const uint16_t &getEngineSpeedAttribute() {
        return engineSpeedAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint16_t &getEngineSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getEngineSpeedAttribute();
    }
    COMMONAPI_EXPORT virtual void setEngineSpeedAttribute(uint16_t _value) {
        const bool valueChanged = trySetEngineSpeedAttribute(std::move(_value));
        if (valueChanged) {
            fireEngineSpeedAttributeChanged(engineSpeedAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear &getCurrentGearAttribute() {
        return currentGearAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear &getCurrentGearAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getCurrentGearAttribute();
    }
    COMMONAPI_EXPORT virtual void setCurrentGearAttribute(::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear _value) {
        const bool valueChanged = trySetCurrentGearAttribute(std::move(_value));
        if (valueChanged) {
            fireCurrentGearAttributeChanged(currentGearAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual const bool &getIsReverseGearOnAttribute() {
        return isReverseGearOnAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const bool &getIsReverseGearOnAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getIsReverseGearOnAttribute();
    }
    COMMONAPI_EXPORT virtual void setIsReverseGearOnAttribute(bool _value) {
        const bool valueChanged = trySetIsReverseGearOnAttribute(std::move(_value));
        if (valueChanged) {
            fireIsReverseGearOnAttributeChanged(isReverseGearOnAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType &getDrivePowerTransmissionAttribute() {
        return drivePowerTransmissionAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType &getDrivePowerTransmissionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getDrivePowerTransmissionAttribute();
    }
    COMMONAPI_EXPORT virtual void setDrivePowerTransmissionAttribute(::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType _value) {
        const bool valueChanged = trySetDrivePowerTransmissionAttribute(std::move(_value));
        if (valueChanged) {
            fireDrivePowerTransmissionAttributeChanged(drivePowerTransmissionAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus &getDoorsOpeningStatusAttribute() {
        return doorsOpeningStatusAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus &getDoorsOpeningStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getDoorsOpeningStatusAttribute();
    }
    COMMONAPI_EXPORT virtual void setDoorsOpeningStatusAttribute(::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus _value) {
        const bool valueChanged = trySetDoorsOpeningStatusAttribute(std::move(_value));
        if (valueChanged) {
            fireDoorsOpeningStatusAttributeChanged(doorsOpeningStatusAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual const std::vector< bool > &getSeatHeatingStatusAttribute() {
        return seatHeatingStatusAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const std::vector< bool > &getSeatHeatingStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getSeatHeatingStatusAttribute();
    }
    COMMONAPI_EXPORT virtual void setSeatHeatingStatusAttribute(std::vector< bool > _value) {
        const bool valueChanged = trySetSeatHeatingStatusAttribute(std::move(_value));
        if (valueChanged) {
            fireSeatHeatingStatusAttributeChanged(seatHeatingStatusAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setSeatHeatingStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< bool > _value) {
        (void)_client;
        setSeatHeatingStatusAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const std::vector< uint8_t > &getSeatHeatingLevelAttribute() {
        return seatHeatingLevelAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const std::vector< uint8_t > &getSeatHeatingLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getSeatHeatingLevelAttribute();
    }
    COMMONAPI_EXPORT virtual void setSeatHeatingLevelAttribute(std::vector< uint8_t > _value) {
        const bool valueChanged = trySetSeatHeatingLevelAttribute(std::move(_value));
        if (valueChanged) {
            fireSeatHeatingLevelAttributeChanged(seatHeatingLevelAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setSeatHeatingLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< uint8_t > _value) {
        (void)_client;
        setSeatHeatingLevelAttribute(_value);
    }
    /*
     * description: 
     * Trigger tire pressure initialization process
     */
    COMMONAPI_EXPORT virtual void initTirePressureCalibration(const std::shared_ptr<CommonAPI::ClientId> _client, initTirePressureCalibrationReply_t _reply) {
        (void)_client;
        _reply();
    }
    /*
     * description: 
     * Trigger the change on doors opening state
     */
    COMMONAPI_EXPORT virtual void changeDoorsState(const std::shared_ptr<CommonAPI::ClientId> _client, ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::CarDoorsCommand _commands, changeDoorsStateReply_t _reply) {
        (void)_client;
        (void)_commands;
        _reply();
    }
    /*
     * description: 
     * Vehicle position data provided by GPS
     */
    COMMONAPI_EXPORT virtual void fireVehiclePositionEvent(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::StatusGPS &_statusGPS) {
        PlaygroundStub::fireVehiclePositionEvent(_statusGPS);
    }
    /*
     * description: 
     * The current tank volume
     */
    COMMONAPI_EXPORT virtual void fireCurrentTankVolumeEvent(const uint8_t &_volume) {
        PlaygroundStub::fireCurrentTankVolumeEvent(_volume);
    }


protected:
    /*
     * description: 
     * Current consumption in liters per 100 km
     */
    COMMONAPI_EXPORT virtual bool trySetConsumptionAttribute(float _value) {
        if (!validateConsumptionAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<PlaygroundStubAdapter> stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockConsumptionAttribute(true);
            valueChanged = (consumptionAttributeValue_ != _value);
            consumptionAttributeValue_ = std::move(_value);
            stubAdapter->lockConsumptionAttribute(false);
        } else {
            valueChanged = (consumptionAttributeValue_ != _value);
            consumptionAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateConsumptionAttributeRequestedValue(const float &_value) {
        (void)_value;
        return true;
    }
    /*
     * description: 
     * Capacity of the fuel tank in milliliters
     * Unit: ml
     */
    COMMONAPI_EXPORT virtual bool trySetCapacityAttribute(uint8_t _value) {
        if (!validateCapacityAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<PlaygroundStubAdapter> stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockCapacityAttribute(true);
            valueChanged = (capacityAttributeValue_ != _value);
            capacityAttributeValue_ = std::move(_value);
            stubAdapter->lockCapacityAttribute(false);
        } else {
            valueChanged = (capacityAttributeValue_ != _value);
            capacityAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateCapacityAttributeRequestedValue(const uint8_t &_value) {
        (void)_value;
        return true;
    }
    /*
     * description: 
     * Current volume of fuel in the tank in liters
     */
    COMMONAPI_EXPORT virtual bool trySetVolumeAttribute(float _value) {
        if (!validateVolumeAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<PlaygroundStubAdapter> stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockVolumeAttribute(true);
            valueChanged = (volumeAttributeValue_ != _value);
            volumeAttributeValue_ = std::move(_value);
            stubAdapter->lockVolumeAttribute(false);
        } else {
            valueChanged = (volumeAttributeValue_ != _value);
            volumeAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateVolumeAttributeRequestedValue(const float &_value) {
        (void)_value;
        return true;
    }
    /*
     * description: 
     * Engine speed measured as rotations per minute
     */
    COMMONAPI_EXPORT virtual bool trySetEngineSpeedAttribute(uint16_t _value) {
        if (!validateEngineSpeedAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<PlaygroundStubAdapter> stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockEngineSpeedAttribute(true);
            valueChanged = (engineSpeedAttributeValue_ != _value);
            engineSpeedAttributeValue_ = std::move(_value);
            stubAdapter->lockEngineSpeedAttribute(false);
        } else {
            valueChanged = (engineSpeedAttributeValue_ != _value);
            engineSpeedAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateEngineSpeedAttributeRequestedValue(const uint16_t &_value) {
        (void)_value;
        return true;
    }
    /*
     * description: 
     * Current gear
     */
    COMMONAPI_EXPORT virtual bool trySetCurrentGearAttribute(::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear _value) {
        if (!validateCurrentGearAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<PlaygroundStubAdapter> stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockCurrentGearAttribute(true);
            valueChanged = (currentGearAttributeValue_ != _value);
            currentGearAttributeValue_ = std::move(_value);
            stubAdapter->lockCurrentGearAttribute(false);
        } else {
            valueChanged = (currentGearAttributeValue_ != _value);
            currentGearAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateCurrentGearAttributeRequestedValue(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear &_value) {
        (void)_value;
        return _value.validate();
    }
    /*
     * description: 
     * Is reverse gear selected
     */
    COMMONAPI_EXPORT virtual bool trySetIsReverseGearOnAttribute(bool _value) {
        if (!validateIsReverseGearOnAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<PlaygroundStubAdapter> stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockIsReverseGearOnAttribute(true);
            valueChanged = (isReverseGearOnAttributeValue_ != _value);
            isReverseGearOnAttributeValue_ = std::move(_value);
            stubAdapter->lockIsReverseGearOnAttribute(false);
        } else {
            valueChanged = (isReverseGearOnAttributeValue_ != _value);
            isReverseGearOnAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateIsReverseGearOnAttributeRequestedValue(const bool &_value) {
        (void)_value;
        return true;
    }
    /*
     * description: 
     * Drive Type
     */
    COMMONAPI_EXPORT virtual bool trySetDrivePowerTransmissionAttribute(::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType _value) {
        if (!validateDrivePowerTransmissionAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<PlaygroundStubAdapter> stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockDrivePowerTransmissionAttribute(true);
            valueChanged = (drivePowerTransmissionAttributeValue_ != _value);
            drivePowerTransmissionAttributeValue_ = std::move(_value);
            stubAdapter->lockDrivePowerTransmissionAttribute(false);
        } else {
            valueChanged = (drivePowerTransmissionAttributeValue_ != _value);
            drivePowerTransmissionAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateDrivePowerTransmissionAttributeRequestedValue(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType &_value) {
        (void)_value;
        return _value.validate();
    }
    /*
     * description: 
     * Report the opening status for each door
     */
    COMMONAPI_EXPORT virtual bool trySetDoorsOpeningStatusAttribute(::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus _value) {
        if (!validateDoorsOpeningStatusAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<PlaygroundStubAdapter> stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockDoorsOpeningStatusAttribute(true);
            valueChanged = (doorsOpeningStatusAttributeValue_ != _value);
            doorsOpeningStatusAttributeValue_ = std::move(_value);
            stubAdapter->lockDoorsOpeningStatusAttribute(false);
        } else {
            valueChanged = (doorsOpeningStatusAttributeValue_ != _value);
            doorsOpeningStatusAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateDoorsOpeningStatusAttributeRequestedValue(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus &_value) {
        (void)_value;
        return true;
    }
    /*
     * description: 
     * Describes the seat heating status set by the user.
     * index 0 == Driver
     * index 1 == Co-Driver
     * index 3 == Passenger in the second row on the Driver side
     * index 4 == Passenger in the second row on the Middle side
     * index 5 == Passenger in the second row on the Co-driver side
     * index 6 == Passenger in the third row on the Driver side
     * index 7 == Passenger in the third row on the Co-driver side
     * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
     */
    COMMONAPI_EXPORT virtual bool trySetSeatHeatingStatusAttribute(std::vector< bool > _value) {
        if (!validateSeatHeatingStatusAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<PlaygroundStubAdapter> stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockSeatHeatingStatusAttribute(true);
            valueChanged = (seatHeatingStatusAttributeValue_ != _value);
            seatHeatingStatusAttributeValue_ = std::move(_value);
            stubAdapter->lockSeatHeatingStatusAttribute(false);
        } else {
            valueChanged = (seatHeatingStatusAttributeValue_ != _value);
            seatHeatingStatusAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateSeatHeatingStatusAttributeRequestedValue(const std::vector< bool > &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteSeatHeatingStatusAttributeChanged() {
        // No operation in default
    }
    /*
     * description: 
     * Describes the seat heating level selected by the user
     * index 0 == Driver
     * index 1 == Co-Driver
     * index 3 == Passenger in the second row on the Driver side
     * index 4 == Passenger in the second row on the Middle side
     * index 5 == Passenger in the second row on the Co-driver side
     * index 6 == Passenger in the third row on the Driver side
     * index 7 == Passenger in the third row on the Co-driver side
     * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
     */
    COMMONAPI_EXPORT virtual bool trySetSeatHeatingLevelAttribute(std::vector< uint8_t > _value) {
        if (!validateSeatHeatingLevelAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<PlaygroundStubAdapter> stubAdapter = CommonAPI::Stub<PlaygroundStubAdapter, PlaygroundStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockSeatHeatingLevelAttribute(true);
            valueChanged = (seatHeatingLevelAttributeValue_ != _value);
            seatHeatingLevelAttributeValue_ = std::move(_value);
            stubAdapter->lockSeatHeatingLevelAttribute(false);
        } else {
            valueChanged = (seatHeatingLevelAttributeValue_ != _value);
            seatHeatingLevelAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateSeatHeatingLevelAttributeRequestedValue(const std::vector< uint8_t > &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteSeatHeatingLevelAttributeChanged() {
        // No operation in default
    }
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual PlaygroundStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(PlaygroundStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }

        /*
         * description: 
         * Current consumption in liters per 100 km
         */
        /*
         * description: 
         * Capacity of the fuel tank in milliliters
         * Unit: ml
         */
        /*
         * description: 
         * Current volume of fuel in the tank in liters
         */
        /*
         * description: 
         * Engine speed measured as rotations per minute
         */
        /*
         * description: 
         * Current gear
         */
        /*
         * description: 
         * Is reverse gear selected
         */
        /*
         * description: 
         * Drive Type
         */
        /*
         * description: 
         * Report the opening status for each door
         */
        /*
         * description: 
         * Describes the seat heating status set by the user.
         * index 0 == Driver
         * index 1 == Co-Driver
         * index 3 == Passenger in the second row on the Driver side
         * index 4 == Passenger in the second row on the Middle side
         * index 5 == Passenger in the second row on the Co-driver side
         * index 6 == Passenger in the third row on the Driver side
         * index 7 == Passenger in the third row on the Co-driver side
         * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
         */
        COMMONAPI_EXPORT virtual void onRemoteSeatHeatingStatusAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteSeatHeatingStatusAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetSeatHeatingStatusAttribute(std::vector< bool > _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetSeatHeatingStatusAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetSeatHeatingStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< bool > _value) {
            (void)_client;
            return onRemoteSetSeatHeatingStatusAttribute(_value);
        }
        /*
         * description: 
         * Describes the seat heating level selected by the user
         * index 0 == Driver
         * index 1 == Co-Driver
         * index 3 == Passenger in the second row on the Driver side
         * index 4 == Passenger in the second row on the Middle side
         * index 5 == Passenger in the second row on the Co-driver side
         * index 6 == Passenger in the third row on the Driver side
         * index 7 == Passenger in the third row on the Co-driver side
         * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
         */
        COMMONAPI_EXPORT virtual void onRemoteSeatHeatingLevelAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteSeatHeatingLevelAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetSeatHeatingLevelAttribute(std::vector< uint8_t > _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetSeatHeatingLevelAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetSeatHeatingLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< uint8_t > _value) {
            (void)_client;
            return onRemoteSetSeatHeatingLevelAttribute(_value);
        }

    private:
        PlaygroundStubDefault *defaultStub_;
    };
protected:
    PlaygroundStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    /*
     * description: 
     * Current consumption in liters per 100 km
     */
    float consumptionAttributeValue_ {};
    /*
     * description: 
     * Capacity of the fuel tank in milliliters
     * Unit: ml
     */
    uint8_t capacityAttributeValue_ {};
    /*
     * description: 
     * Current volume of fuel in the tank in liters
     */
    float volumeAttributeValue_ {};
    /*
     * description: 
     * Engine speed measured as rotations per minute
     */
    uint16_t engineSpeedAttributeValue_ {};
    /*
     * description: 
     * Current gear
     */
    ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::Gear currentGearAttributeValue_ {};
    /*
     * description: 
     * Is reverse gear selected
     */
    bool isReverseGearOnAttributeValue_ {};
    /*
     * description: 
     * Drive Type
     */
    ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DriveType drivePowerTransmissionAttributeValue_ {};
    /*
     * description: 
     * Report the opening status for each door
     */
    ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::DoorsStatus doorsOpeningStatusAttributeValue_ {};
    /*
     * description: 
     * Describes the seat heating status set by the user.
     * index 0 == Driver
     * index 1 == Co-Driver
     * index 3 == Passenger in the second row on the Driver side
     * index 4 == Passenger in the second row on the Middle side
     * index 5 == Passenger in the second row on the Co-driver side
     * index 6 == Passenger in the third row on the Driver side
     * index 7 == Passenger in the third row on the Co-driver side
     * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
     */
    std::vector< bool > seatHeatingStatusAttributeValue_ {};
    /*
     * description: 
     * Describes the seat heating level selected by the user
     * index 0 == Driver
     * index 1 == Co-Driver
     * index 3 == Passenger in the second row on the Driver side
     * index 4 == Passenger in the second row on the Middle side
     * index 5 == Passenger in the second row on the Co-driver side
     * index 6 == Passenger in the third row on the Driver side
     * index 7 == Passenger in the third row on the Co-driver side
     * Just for demo the some SomeIP service will return values for Driver and Co-Driver only
     */
    std::vector< uint8_t > seatHeatingLevelAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace playground
} // namespace vehicle
} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_VEHICLE_PLAYGROUND_Playground_STUB_DEFAULT
