/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/org/genivi/vehicle/playground/PlaygroundSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace org {
namespace genivi {
namespace vehicle {
namespace playground {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createPlaygroundSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< PlaygroundSomeIPProxy>(_address, _connection);
}

void initializePlaygroundSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:org.genivi.vehicle.playground.Playground:v1_0:1",
        0xff40, 0x1, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "org.genivi.vehicle.playground.Playground:v1_0",
        &createPlaygroundSomeIPProxy);
}

INITIALIZER(registerPlaygroundSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializePlaygroundSomeIPProxy);
}

PlaygroundSomeIPProxy::PlaygroundSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          consumption_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0x8001), CommonAPI::SomeIP::method_id_t(0x1), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
          capacity_(*this, CommonAPI::SomeIP::method_id_t(0x2), false, false, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
          volume_(*this, CommonAPI::SomeIP::method_id_t(0x3), false, false, static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
          engineSpeed_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x2), CommonAPI::SomeIP::event_id_t(0x8002), CommonAPI::SomeIP::method_id_t(0x4), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr)),
          currentGear_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x3), CommonAPI::SomeIP::event_id_t(0x8003), CommonAPI::SomeIP::method_id_t(0x5), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, static_cast< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::GearDeployment_t* >(nullptr)),
          isReverseGearOn_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x4), CommonAPI::SomeIP::event_id_t(0x8004), CommonAPI::SomeIP::method_id_t(0x6), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
          drivePowerTransmission_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x5), CommonAPI::SomeIP::event_id_t(0x8005), CommonAPI::SomeIP::method_id_t(0x7), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, static_cast< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::DriveTypeDeployment_t* >(nullptr)),
          doorsOpeningStatus_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x6), CommonAPI::SomeIP::event_id_t(0x8006), CommonAPI::SomeIP::method_id_t(0x8), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, static_cast< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::DoorsStatusDeployment_t* >(nullptr)),
          seatHeatingStatus_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x7), CommonAPI::SomeIP::event_id_t(0x8007), CommonAPI::SomeIP::method_id_t(0x9), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, CommonAPI::SomeIP::method_id_t(0xa), false, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::EmptyDeployment >* >(nullptr)),
          seatHeatingLevel_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x8), CommonAPI::SomeIP::event_id_t(0x8008), CommonAPI::SomeIP::method_id_t(0xb), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, CommonAPI::SomeIP::method_id_t(0xc), false, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr)),
          vehiclePosition_(*this, 0x9, CommonAPI::SomeIP::event_id_t(0x8009), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::StatusGPSDeployment_t* >(nullptr))),
          currentTankVolume_(*this, 0xa, CommonAPI::SomeIP::event_id_t(0x800a), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)))
{
}

PlaygroundSomeIPProxy::~PlaygroundSomeIPProxy() {
    completed_.set_value();
}

PlaygroundSomeIPProxy::ConsumptionAttribute& PlaygroundSomeIPProxy::getConsumptionAttribute() {
    return consumption_;
}
PlaygroundSomeIPProxy::CapacityAttribute& PlaygroundSomeIPProxy::getCapacityAttribute() {
    return capacity_;
}
PlaygroundSomeIPProxy::VolumeAttribute& PlaygroundSomeIPProxy::getVolumeAttribute() {
    return volume_;
}
PlaygroundSomeIPProxy::EngineSpeedAttribute& PlaygroundSomeIPProxy::getEngineSpeedAttribute() {
    return engineSpeed_;
}
PlaygroundSomeIPProxy::CurrentGearAttribute& PlaygroundSomeIPProxy::getCurrentGearAttribute() {
    return currentGear_;
}
PlaygroundSomeIPProxy::IsReverseGearOnAttribute& PlaygroundSomeIPProxy::getIsReverseGearOnAttribute() {
    return isReverseGearOn_;
}
PlaygroundSomeIPProxy::DrivePowerTransmissionAttribute& PlaygroundSomeIPProxy::getDrivePowerTransmissionAttribute() {
    return drivePowerTransmission_;
}
PlaygroundSomeIPProxy::DoorsOpeningStatusAttribute& PlaygroundSomeIPProxy::getDoorsOpeningStatusAttribute() {
    return doorsOpeningStatus_;
}
PlaygroundSomeIPProxy::SeatHeatingStatusAttribute& PlaygroundSomeIPProxy::getSeatHeatingStatusAttribute() {
    return seatHeatingStatus_;
}
PlaygroundSomeIPProxy::SeatHeatingLevelAttribute& PlaygroundSomeIPProxy::getSeatHeatingLevelAttribute() {
    return seatHeatingLevel_;
}

PlaygroundSomeIPProxy::VehiclePositionEvent& PlaygroundSomeIPProxy::getVehiclePositionEvent() {
    return vehiclePosition_;
}
PlaygroundSomeIPProxy::CurrentTankVolumeEvent& PlaygroundSomeIPProxy::getCurrentTankVolumeEvent() {
    return currentTankVolume_;
}

/*
 * description: 
 * Trigger tire pressure initialization process
 */
void PlaygroundSomeIPProxy::initTirePressureCalibration(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0xd),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        _internalCallStatus);
}

std::future<CommonAPI::CallStatus> PlaygroundSomeIPProxy::initTirePressureCalibrationAsync(InitTirePressureCalibrationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0xd),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
            if (_callback)
                _callback(_internalCallStatus);
        },
        std::make_tuple());
}

/*
 * description: 
 * Trigger the change on doors opening state
 */
void PlaygroundSomeIPProxy::changeDoorsState(::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::CarDoorsCommand _commands, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::CarDoorsCommand, ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::CarDoorsCommandDeployment_t> deploy_commands(_commands, static_cast< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::CarDoorsCommandDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::CarDoorsCommand,
                ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::CarDoorsCommandDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0xe),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_commands,
        _internalCallStatus);
}

std::future<CommonAPI::CallStatus> PlaygroundSomeIPProxy::changeDoorsStateAsync(const ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::CarDoorsCommand &_commands, ChangeDoorsStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::CarDoorsCommand, ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::CarDoorsCommandDeployment_t> deploy_commands(_commands, static_cast< ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::CarDoorsCommandDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes::CarDoorsCommand,
                ::org::genivi::vehicle::playgroundtypes::PlaygroundTypes_::CarDoorsCommandDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0xe),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_commands,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
            if (_callback)
                _callback(_internalCallStatus);
        },
        std::make_tuple());
}

void PlaygroundSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> PlaygroundSomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace playground
} // namespace vehicle
} // namespace genivi
} // namespace org
} // namespace v1
